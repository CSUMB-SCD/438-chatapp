#!/usr/bin/env node

// Module dependencies.
var app = require('../app');
var debug = require('debug')('chat-app:server');
var http = require('http');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);
var io = require('socket.io').listen(server); 
var connections = [];
var namePerson = [];
var personName = [];
var userCount = 0;

io.sockets.on('connection', function(socket) {
  connections.push(socket);
  userCount++;
  console.log('Connected: %s sockets connected', connections.length);
  
  socket.on("disconnect", function(data) {
     connections.splice(connections.indexOf(socket), 1); 
     console.log('Disconnected: %s sockets connected', connections.length);
     namePerson.splice(namePerson.indexOf(socket), 1);
     userCount--;

     console.log("Handle disconnect: list of people: "); 
     console.log(personName);
     io.sockets.emit('list', namePerson);
  });
  
  socket.on('name', function(data) {
    personName = data;
    console.log('Name', data);
    namePerson.push(personName);
    console.log("Handle 'name' event: list of people: "); 
    console.log(personName);
    io.sockets.emit('list', namePerson);
  });
  
  namePerson.push(personName);
  console.log("Handle 'connection': list of people: "); 
  console.log(personName);

  socket.on('send message', function(data) {
    console.log('Data message', data);
    console.log("num connections before push: " + connections.length);
    //TODO: consider not pushing new items to the connections array here.  Is not neccessary
    io.sockets.emit('new message', {msg: data, id: connections.push(connections.id), users: userCount, name: personName});
    console.log("num connections before push: " + connections.length);
  });
});

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}